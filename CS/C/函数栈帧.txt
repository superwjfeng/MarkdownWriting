思考与问题

1、局部变量是怎么创建的
通过寄存器拷贝传入的参数创建一份临时拷贝

2、为什么局部变量的值是随机值
在建立函数栈帧空间的时候编译器为其中的部分空间赋了随机值。
赋多少空间，赋什么值取决于编译器，VS2019编译器赋的是CCCCCCCCh

3、函数是怎么传参的？传参的顺序是怎样的？
从右向左建立栈帧传擦

4、形参和实参是什么关系？
形参是实参的一份临时拷贝，通过放置在寄存器中生成

5、函数调用时怎么做的？
通过call指令，调用函数，函数的地址就是其第一条指令的地址。将传入的参数置于原栈帧空间的栈顶。

6、函数调用结束后时怎么返回的？
将esp和ebp pop，清空其栈帧空间，通过存储的ebp-main和call的下一条指令回到上一步调用函数的栈帧中。
当Add的栈帧被销毁时，z也会被销毁，因此不能直接返回Add中的临时变量z。
做法是将return的值装载到一个寄存器中，并将寄存器中保存的值给原函数中的接收变量。
如果是将临时变量z设置为静态变量z，即 static int z。那么z会被保存到静态区中，并不会被销毁。但编译器仍然会选择将z的值加入到寄存器中生成临时拷贝后返回给上层

7、为什么子函数可以使用上级变量或者全局变量，但反过来不行，或者为什么同级函数不能互相调用变量？
全局变量保存在静态区中不会被销毁，需要使用时随时可以调用